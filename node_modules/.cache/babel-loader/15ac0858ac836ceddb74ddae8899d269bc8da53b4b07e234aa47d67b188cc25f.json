{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// const AllCategory = () => {\n//   const [categories, setCategories] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(\"\");\n//   const [searchTerm, setSearchTerm] = useState(\"\"); // For search functionality\n//   const [currentPage, setCurrentPage] = useState(1); // For pagination\n//   const [itemsPerPage] = useState(10); // Items per page\n\n//   // Fetch categories from the API\n//   useEffect(() => {\n//     const fetchCategories = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:8000/api/category\");\n//         console.log(response.data.categories); // Log the API response\n//         setCategories(response.data.categories); // Store categories in state\n//       } catch (err) {\n//         setError(\"Failed to fetch categories.\");\n//       } finally {\n//         setLoading(false); // Stop loading once data is fetched\n//       }\n//     };\n\n//     fetchCategories();\n//   }, []);\n\n//   // Handle search with optional chaining and fallback\n//   const filteredCategories = categories.filter((category) =>\n//     category?.name?.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n\n//   // Pagination logic\n//   const indexOfLastItem = currentPage * itemsPerPage;\n//   const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n//   const currentItems = filteredCategories.slice(\n//     indexOfFirstItem,\n//     indexOfLastItem\n//   );\n\n//   // Change page\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n//   if (loading) {\n//     return <div className=\"text-center mt-5\">Loading...</div>; // Show loading state while fetching\n//   }\n\n//   if (error) {\n//     return <div className=\"text-danger text-center mt-5\">{error}</div>; // Show error message if fetching fails\n//   }\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <div className=\"card shadow\">\n//         <div className=\"card-header bg-primary text-white\">\n//           <h4 className=\"mb-0\">Category List</h4>\n//         </div>\n//         <div className=\"card-body\">\n//           {/* Search Input */}\n//           <div className=\"mb-3\">\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               placeholder=\"Search by name...\"\n//               value={searchTerm}\n//               onChange={(e) => setSearchTerm(e.target.value)}\n//             />\n//           </div>\n\n//           {/* Table */}\n//           <div className=\"table-responsive\">\n//             <table className=\"table table-striped table-hover\">\n//               <thead className=\"table-dark\">\n//                 <tr>\n//                   <th>Name</th>\n//                   <th>Position</th>\n//                   <th>Office</th>\n//                   <th>Age</th>\n//                   <th>Start Date</th>\n//                   <th>Salary</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {currentItems.map((category, index) => (\n//                   <tr key={index}>\n//                     <td>{category?.name || \"N/A\"}</td>\n//                     <td>{category?.position || \"N/A\"}</td>\n//                     <td>{category?.office || \"N/A\"}</td>\n//                     <td>{category?.age || \"N/A\"}</td>\n//                     <td>{category?.startDate || \"N/A\"}</td>\n//                     <td>{category?.salary || \"N/A\"}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n\n//           {/* Pagination */}\n//           <nav>\n//             <ul className=\"pagination justify-content-center\">\n//               {Array.from({\n//                 length: Math.ceil(filteredCategories.length / itemsPerPage),\n//               }).map((_, index) => (\n//                 <li\n//                   key={index}\n//                   className={`page-item ${\n//                     currentPage === index + 1 ? \"active\" : \"\"\n//                   }`}\n//                 >\n//                   <button\n//                     className=\"page-link\"\n//                     onClick={() => paginate(index + 1)}\n//                   >\n//                     {index + 1}\n//                   </button>\n//                 </li>\n//               ))}\n//             </ul>\n//           </nav>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AllCategory;","map":{"version":3,"names":[],"sources":["E:/Reataurent POS/Restaurent-Front-end/src/pages/Category/AllCategory.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const AllCategory = () => {\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(\"\");\r\n//   const [searchTerm, setSearchTerm] = useState(\"\"); // For search functionality\r\n//   const [currentPage, setCurrentPage] = useState(1); // For pagination\r\n//   const [itemsPerPage] = useState(10); // Items per page\r\n\r\n//   // Fetch categories from the API\r\n//   useEffect(() => {\r\n//     const fetchCategories = async () => {\r\n//       try {\r\n//         const response = await axios.get(\"http://localhost:8000/api/category\");\r\n//         console.log(response.data.categories); // Log the API response\r\n//         setCategories(response.data.categories); // Store categories in state\r\n//       } catch (err) {\r\n//         setError(\"Failed to fetch categories.\");\r\n//       } finally {\r\n//         setLoading(false); // Stop loading once data is fetched\r\n//       }\r\n//     };\r\n\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   // Handle search with optional chaining and fallback\r\n//   const filteredCategories = categories.filter((category) =>\r\n//     category?.name?.toLowerCase().includes(searchTerm.toLowerCase())\r\n//   );\r\n\r\n//   // Pagination logic\r\n//   const indexOfLastItem = currentPage * itemsPerPage;\r\n//   const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n//   const currentItems = filteredCategories.slice(\r\n//     indexOfFirstItem,\r\n//     indexOfLastItem\r\n//   );\r\n\r\n//   // Change page\r\n//   const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n//   if (loading) {\r\n//     return <div className=\"text-center mt-5\">Loading...</div>; // Show loading state while fetching\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div className=\"text-danger text-center mt-5\">{error}</div>; // Show error message if fetching fails\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <div className=\"card shadow\">\r\n//         <div className=\"card-header bg-primary text-white\">\r\n//           <h4 className=\"mb-0\">Category List</h4>\r\n//         </div>\r\n//         <div className=\"card-body\">\r\n//           {/* Search Input */}\r\n//           <div className=\"mb-3\">\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control\"\r\n//               placeholder=\"Search by name...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Table */}\r\n//           <div className=\"table-responsive\">\r\n//             <table className=\"table table-striped table-hover\">\r\n//               <thead className=\"table-dark\">\r\n//                 <tr>\r\n//                   <th>Name</th>\r\n//                   <th>Position</th>\r\n//                   <th>Office</th>\r\n//                   <th>Age</th>\r\n//                   <th>Start Date</th>\r\n//                   <th>Salary</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {currentItems.map((category, index) => (\r\n//                   <tr key={index}>\r\n//                     <td>{category?.name || \"N/A\"}</td>\r\n//                     <td>{category?.position || \"N/A\"}</td>\r\n//                     <td>{category?.office || \"N/A\"}</td>\r\n//                     <td>{category?.age || \"N/A\"}</td>\r\n//                     <td>{category?.startDate || \"N/A\"}</td>\r\n//                     <td>{category?.salary || \"N/A\"}</td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n\r\n//           {/* Pagination */}\r\n//           <nav>\r\n//             <ul className=\"pagination justify-content-center\">\r\n//               {Array.from({\r\n//                 length: Math.ceil(filteredCategories.length / itemsPerPage),\r\n//               }).map((_, index) => (\r\n//                 <li\r\n//                   key={index}\r\n//                   className={`page-item ${\r\n//                     currentPage === index + 1 ? \"active\" : \"\"\r\n//                   }`}\r\n//                 >\r\n//                   <button\r\n//                     className=\"page-link\"\r\n//                     onClick={() => paginate(index + 1)}\r\n//                   >\r\n//                     {index + 1}\r\n//                   </button>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </nav>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AllCategory;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}