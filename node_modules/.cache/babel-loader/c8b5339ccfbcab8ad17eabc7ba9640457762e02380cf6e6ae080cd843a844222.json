{"ast":null,"code":"var _jsxFileName = \"E:\\\\Reataurent POS\\\\Restaurent-Front-end\\\\src\\\\pages\\\\Category\\\\AllCategory.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport DataTable from \"react-data-table-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllCategory = () => {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  // Fetch categories from the API\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/api/category\");\n        setCategories(response.data.categories); // Store categories in state\n      } catch (err) {\n        setError(\"Failed to fetch categories.\");\n      } finally {\n        setLoading(false); // Stop loading once data is fetched\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Define columns for the DataTable\n  const columns = [{\n    name: \"Name\",\n    selector: row => row.name,\n    sortable: true\n  }, {\n    name: \"Position\",\n    selector: row => row.position,\n    sortable: true\n  }, {\n    name: \"Office\",\n    selector: row => row.office,\n    sortable: true\n  }, {\n    name: \"Age\",\n    selector: row => row.age,\n    sortable: true\n  }, {\n    name: \"Start Date\",\n    selector: row => row.startDate,\n    sortable: true\n  }, {\n    name: \"Salary\",\n    selector: row => row.salary,\n    sortable: true\n  }];\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this); // Show loading state while fetching\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this); // Show error message if fetching fails\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-responsive\",\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        title: \"Categories\",\n        columns: columns,\n        data: categories,\n        pagination: true,\n        highlightOnHover: true,\n        striped: true,\n        responsive: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(AllCategory, \"dNgZSEwRz/ru9XYgA4cJGF3Ywlo=\");\n_c = AllCategory;\nexport default AllCategory;\nvar _c;\n$RefreshReg$(_c, \"AllCategory\");","map":{"version":3,"names":["React","useEffect","useState","axios","DataTable","jsxDEV","_jsxDEV","AllCategory","_s","categories","setCategories","loading","setLoading","error","setError","fetchCategories","response","get","data","err","columns","name","selector","row","sortable","position","office","age","startDate","salary","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","pagination","highlightOnHover","striped","responsive","_c","$RefreshReg$"],"sources":["E:/Reataurent POS/Restaurent-Front-end/src/pages/Category/AllCategory.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport DataTable from \"react-data-table-component\";\r\n\r\nconst AllCategory = () => {\r\n  const [categories, setCategories] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Fetch categories from the API\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:8000/api/category\");\r\n        setCategories(response.data.categories); // Store categories in state\r\n      } catch (err) {\r\n        setError(\"Failed to fetch categories.\");\r\n      } finally {\r\n        setLoading(false); // Stop loading once data is fetched\r\n      }\r\n    };\r\n\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  // Define columns for the DataTable\r\n  const columns = [\r\n    {\r\n      name: \"Name\",\r\n      selector: (row) => row.name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Position\",\r\n      selector: (row) => row.position,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Office\",\r\n      selector: (row) => row.office,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Age\",\r\n      selector: (row) => row.age,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Start Date\",\r\n      selector: (row) => row.startDate,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Salary\",\r\n      selector: (row) => row.salary,\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>; // Show loading state while fetching\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"text-danger\">{error}</div>; // Show error message if fetching fails\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-body\">\r\n      <div className=\"table-responsive\">\r\n        <DataTable\r\n          title=\"Categories\"\r\n          columns={columns}\r\n          data={categories}\r\n          pagination\r\n          highlightOnHover\r\n          striped\r\n          responsive\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllCategory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}